import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import plotly.express as px
import plotly.graph_objects as go

# Configuration de la page
st.set_page_config(
    page_title="üè• Pr√©diction d'Adh√©rence M√©dicamenteuse",
    page_icon="üíä",
    layout="wide"
)

# CSS pour am√©liorer l'apparence
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #1f77b4, #ff7f0e);
        color: white;
        padding: 20px;
        text-align: center;
        border-radius: 10px;
        margin-bottom: 30px;
    }
    
    .step-box {
        background-color: #f8f9fa;
        border-left: 4px solid #1f77b4;
        padding: 15px;
        margin: 15px 0;
        border-radius: 5px;
    }
    
    .metric-card {
        background-color: #e8f4fd;
        border: 1px solid #1f77b4;
        padding: 15px;
        border-radius: 10px;
        text-align: center;
    }
    
    .success-box {
        background-color: #d4edda;
        border: 1px solid #28a745;
        padding: 10px;
        border-radius: 5px;
        color: #155724;
    }
</style>
""", unsafe_allow_html=True)

# En-t√™te principal
st.markdown("""
<div class="main-header">
    <h1>üè• Tutoriel : Pr√©diction d'Adh√©rence M√©dicamenteuse</h1>
    <h3>Apprendre le Machine Learning avec un cas concret</h3>
</div>
""", unsafe_allow_html=True)

# Introduction
st.markdown("""
## üéØ Objectif de ce tutoriel

Ce tutoriel vous apprend √† **pr√©dire si un patient va bien suivre son traitement** en utilisant le Machine Learning. 
Nous allons utiliser des donn√©es patient simples pour construire un mod√®le intelligent.

**Ce que vous allez apprendre :**
- Comment pr√©parer des donn√©es m√©dicales
- Comment entra√Æner un mod√®le de Machine Learning  
- Comment √©valuer les performances du mod√®le
- Comment faire des pr√©dictions sur de nouveaux patients

---
""")

# Initialisation des donn√©es en session state
if 'data_generated' not in st.session_state:
    st.session_state.data_generated = False
if 'model_trained' not in st.session_state:
    st.session_state.model_trained = False

# √âTAPE 1 : G√©n√©ration des donn√©es
st.markdown('<div class="step-box">', unsafe_allow_html=True)
st.markdown("### üìä √âtape 1 : Cr√©ation des donn√©es patients")
st.markdown("""
**Explication :** Nous allons cr√©er un jeu de donn√©es fictif repr√©sentant des patients avec :
- √Çge du patient
- Co√ªt du traitement annuel  
- Nombre d'effets secondaires
- Si le patient adh√®re au traitement (OUI/NON)
""")

if st.button("üé≤ G√©n√©rer les donn√©es patients", key="generate_data"):
    with st.spinner("G√©n√©ration des donn√©es..."):
        # G√©n√©ration des donn√©es
        np.random.seed(42)
        n_patients = 1000
        
        # Variables explicatives
        age = np.random.normal(65, 15, n_patients)
        age = np.clip(age, 18, 90)  # √Çge entre 18 et 90 ans
        
        cout_annuel = np.random.exponential(2000, n_patients)
        cout_annuel = np.clip(cout_annuel, 500, 8000)  # Co√ªt entre 500‚Ç¨ et 8000‚Ç¨
        
        effets_secondaires = np.random.poisson(2, n_patients)
        effets_secondaires = np.clip(effets_secondaires, 0, 8)  # 0 √† 8 effets
        
        # Variable cible (adh√©rence) - logique m√©tier
        # Plus le patient est jeune, moins d'effets secondaires, co√ªt faible = meilleure adh√©rence
        score_adherence = (
            -0.02 * age +  # Plus jeune = mieux
            -0.0003 * cout_annuel +  # Moins cher = mieux  
            -0.5 * effets_secondaires +  # Moins d'effets = mieux
            np.random.normal(0, 1, n_patients)  # Bruit al√©atoire
        )
        
        adherence = (score_adherence > np.median(score_adherence)).astype(int)
        
        # Cr√©ation du DataFrame
        data = pd.DataFrame({
            'age': age.round(0).astype(int),
            'cout_annuel': cout_annuel.round(0).astype(int),
            'effets_secondaires': effets_secondaires,
            'adherence': adherence
        })
        
        st.session_state.data = data
        st.session_state.data_generated = True
    
    st.success("‚úÖ Donn√©es g√©n√©r√©es avec succ√®s !")

if st.session_state.data_generated:
    data = st.session_state.data
    
    # Affichage des donn√©es
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**Aper√ßu des donn√©es :**")
        st.dataframe(data.head(10))
        
    with col2:
        st.markdown("**Statistiques :**")
        adherent_count = data['adherence'].sum()
        total_count = len(data)
        
        st.metric("Total patients", total_count)
        st.metric("Patients adh√©rents", f"{adherent_count} ({adherent_count/total_count*100:.1f}%)")
        st.metric("Patients non-adh√©rents", f"{total_count-adherent_count} ({(total_count-adherent_count)/total_count*100:.1f}%)")

st.markdown('</div>', unsafe_allow_html=True)

# √âTAPE 2 : Exploration des donn√©es
if st.session_state.data_generated:
    st.markdown('<div class="step-box">', unsafe_allow_html=True)
    st.markdown("### üîç √âtape 2 : Explorer les donn√©es")
    st.markdown("""
    **Explication :** Avant d'entra√Æner notre mod√®le, nous devons comprendre nos donn√©es.
    Regardons comment l'√¢ge, le co√ªt et les effets secondaires influencent l'adh√©rence.
    """)
    
    if st.button("üìà Cr√©er les graphiques d'exploration", key="explore_data"):
        data = st.session_state.data
        
        # Graphiques
        col1, col2 = st.columns(2)
        
        with col1:
            # Graphique √¢ge vs adh√©rence
            fig1 = px.box(data, x='adherence', y='age', 
                         labels={'adherence': 'Adh√©rence (0=Non, 1=Oui)', 'age': '√Çge'},
                         title="Distribution de l'√¢ge selon l'adh√©rence")
            st.plotly_chart(fig1, use_container_width=True)
            
        with col2:
            # Graphique co√ªt vs adh√©rence  
            fig2 = px.box(data, x='adherence', y='cout_annuel',
                         labels={'adherence': 'Adh√©rence (0=Non, 1=Oui)', 'cout_annuel': 'Co√ªt annuel (‚Ç¨)'},
                         title="Distribution du co√ªt selon l'adh√©rence")
            st.plotly_chart(fig2, use_container_width=True)
            
        # Graphique effets secondaires
        fig3 = px.box(data, x='adherence', y='effets_secondaires',
                     labels={'adherence': 'Adh√©rence (0=Non, 1=Oui)', 'effets_secondaires': 'Nombre d\'effets secondaires'},
                     title="Distribution des effets secondaires selon l'adh√©rence")
        st.plotly_chart(fig3, use_container_width=True)
        
        st.markdown("""
        **üí° Observations :**
        - Les patients plus jeunes ont tendance √† mieux adh√©rer
        - Un co√ªt √©lev√© r√©duit l'adh√©rence  
        - Plus d'effets secondaires = moins d'adh√©rence
        """)
    
    st.markdown('</div>', unsafe_allow_html=True)

# √âTAPE 3 : Entra√Ænement du mod√®le
if st.session_state.data_generated:
    st.markdown('<div class="step-box">', unsafe_allow_html=True)
    st.markdown("### ü§ñ √âtape 3 : Entra√Æner le mod√®le d'IA")
    st.markdown("""
    **Explication :** Nous allons utiliser un algorithme appel√© **Random Forest** (For√™t Al√©atoire).
    
    **Qu'est-ce que Random Forest ?**
    - Imagine 100 m√©decins qui donnent chacun leur opinion
    - Chaque m√©decin regarde les donn√©es diff√©remment  
    - Le diagnostic final = vote majoritaire des 100 m√©decins
    - Plus fiable qu'un seul m√©decin !
    """)
    
    # Choix de l'algorithme
    algo_choice = st.selectbox(
        "Choisissez l'algorithme :",
        ["Random Forest (Recommand√©)", "R√©gression Logistique (Simple)"]
    )
    
    if st.button("üöÄ Entra√Æner le mod√®le", key="train_model"):
        data = st.session_state.data
        
        with st.spinner("Entra√Ænement en cours..."):
            # Pr√©paration des donn√©es
            X = data[['age', 'cout_annuel', 'effets_secondaires']]
            y = data['adherence']
            
            # Division train/test
            X_train, X_test, y_train, y_test = train_test_split(
                X, y, test_size=0.3, random_state=42
            )
            
            # Choix du mod√®le
            if "Random Forest" in algo_choice:
                model = RandomForestClassifier(n_estimators=100, random_state=42)
                model_name = "Random Forest"
            else:
                model = LogisticRegression(random_state=42)
                model_name = "R√©gression Logistique"
            
            # Entra√Ænement
            model.fit(X_train, y_train)
            
            # Pr√©dictions
            y_pred = model.predict(X_test)
            accuracy = accuracy_score(y_test, y_pred)
            
            # Sauvegarde
            st.session_state.model = model
            st.session_state.model_name = model_name
            st.session_state.X_test = X_test
            st.session_state.y_test = y_test
            st.session_state.y_pred = y_pred
            st.session_state.accuracy = accuracy
            st.session_state.model_trained = True
        
        st.success(f"‚úÖ Mod√®le {model_name} entra√Æn√© avec succ√®s !")
        st.metric("Pr√©cision du mod√®le", f"{accuracy:.1%}")
        
        # Importance des variables (pour Random Forest)
        if "Random Forest" in algo_choice:
            importance = model.feature_importances_
            feature_names = ['√Çge', 'Co√ªt annuel', 'Effets secondaires']
            
            fig_imp = px.bar(
                x=feature_names, y=importance,
                title="Importance des variables dans la pr√©diction",
                labels={'x': 'Variables', 'y': 'Importance'}
            )
            st.plotly_chart(fig_imp, use_container_width=True)
    
    st.markdown('</div>', unsafe_allow_html=True)

# √âTAPE 4 : √âvaluation du mod√®le
if st.session_state.get('model_trained', False):
    st.markdown('<div class="step-box">', unsafe_allow_html=True)
    st.markdown("### üìä √âtape 4 : √âvaluer les performances")
    st.markdown("""
    **Explication :** Nous devons v√©rifier si notre mod√®le fait de bonnes pr√©dictions.
    Nous utilisons une **matrice de confusion** pour voir les erreurs.
    """)
    
    if st.button("üìà Analyser les performances", key="evaluate_model"):
        y_test = st.session_state.y_test
        y_pred = st.session_state.y_pred
        accuracy = st.session_state.accuracy
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Matrice de confusion
            cm = confusion_matrix(y_test, y_pred)
            
            fig_cm = px.imshow(
                cm, 
                labels=dict(x="Pr√©diction", y="R√©alit√©", color="Nombre"),
                x=['Non-adh√©rent', 'Adh√©rent'],
                y=['Non-adh√©rent', 'Adh√©rent'],
                title="Matrice de confusion"
            )
            fig_cm.update_layout(width=400, height=400)
            st.plotly_chart(fig_cm, use_container_width=True)
            
        with col2:
            st.markdown("**üìä R√©sultats :**")
            st.metric("Pr√©cision globale", f"{accuracy:.1%}")
            
            # Calcul des m√©triques d√©taill√©es
            tn, fp, fn, tp = cm.ravel()
            precision = tp / (tp + fp) if (tp + fp) > 0 else 0
            recall = tp / (tp + fn) if (tp + fn) > 0 else 0
            
            st.metric("Pr√©cision (patients adh√©rents)", f"{precision:.1%}")
            st.metric("Rappel (patients adh√©rents)", f"{recall:.1%}")
            
            st.markdown("""
            **üí° Interpr√©tation :**
            - **Pr√©cision** : Sur 100 patients pr√©dits adh√©rents, combien le sont vraiment ?
            - **Rappel** : Sur 100 patients vraiment adh√©rents, combien sont d√©tect√©s ?
            """)
    
    st.markdown('</div>', unsafe_allow_html=True)

# √âTAPE 5 : Faire des pr√©dictions
if st.session_state.get('model_trained', False):
    st.markdown('<div class="step-box">', unsafe_allow_html=True)
    st.markdown("### üéØ √âtape 5 : Pr√©dire pour un nouveau patient")
    st.markdown("""
    **Explication :** Maintenant, utilisons notre mod√®le entra√Æn√© pour pr√©dire 
    si un nouveau patient va adh√©rer √† son traitement.
    """)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**Saisissez les informations du patient :**")
        
        patient_age = st.slider("√Çge du patient", 18, 90, 55)
        patient_cout = st.slider("Co√ªt annuel du traitement (‚Ç¨)", 500, 8000, 2000)
        patient_effets = st.slider("Nombre d'effets secondaires", 0, 8, 2)
        
        if st.button("üîÆ Pr√©dire l'adh√©rence", key="predict_patient"):
            model = st.session_state.model
            
            # Pr√©diction
            patient_data = np.array([[patient_age, patient_cout, patient_effets]])
            prediction = model.predict(patient_data)[0]
            proba = model.predict_proba(patient_data)[0]
            
            # Affichage du r√©sultat
            if prediction == 1:
                st.success(f"‚úÖ **Patient ADH√âRENT** (probabilit√©: {proba[1]:.1%})")
                st.balloons()
            else:
                st.error(f"‚ùå **Patient NON-ADH√âRENT** (probabilit√©: {proba[0]:.1%})")
                
            # Recommandations
            st.markdown("**üí° Recommandations :**")
            if patient_cout > 4000:
                st.warning("üí∞ Co√ªt √©lev√© : Consid√©rer une aide financi√®re")
            if patient_effets > 4:
                st.warning("üò∑ Beaucoup d'effets secondaires : Ajuster le traitement")
            if patient_age > 75:
                st.info("üë¥ Patient √¢g√© : Pr√©voir un suivi renforc√©")
    
    with col2:
        # Profil du patient
        st.markdown("**üë§ Profil du patient :**")
        
        patient_data_display = pd.DataFrame({
            'Caract√©ristique': ['√Çge', 'Co√ªt annuel', 'Effets secondaires'],
            'Valeur': [f"{patient_age} ans", f"{patient_cout} ‚Ç¨", patient_effets]
        })
        st.table(patient_data_display)
        
        # Comparaison avec la population
        if 'data' in st.session_state:
            data = st.session_state.data
            st.markdown("**üìä Comparaison avec la population :**")
            
            age_percentile = (data['age'] <= patient_age).mean() * 100
            cout_percentile = (data['cout_annuel'] <= patient_cout).mean() * 100
            effets_percentile = (data['effets_secondaires'] <= patient_effets).mean() * 100
            
            st.write(f"‚Ä¢ √Çge : {age_percentile:.0f}e percentile")
            st.write(f"‚Ä¢ Co√ªt : {cout_percentile:.0f}e percentile") 
            st.write(f"‚Ä¢ Effets : {effets_percentile:.0f}e percentile")
    
    st.markdown('</div>', unsafe_allow_html=True)

# Conclusion
st.markdown("---")
st.markdown("""
## üéâ F√©licitations !

Vous avez cr√©√© votre premier mod√®le de Machine Learning pour pr√©dire l'adh√©rence m√©dicamenteuse !

### üìö Ce que vous avez appris :
1. **Pr√©parer des donn√©es** : Cr√©er un jeu de donn√©es repr√©sentatif
2. **Explorer les donn√©es** : Comprendre les relations entre variables
3. **Entra√Æner un mod√®le** : Utiliser Random Forest pour apprendre
4. **√âvaluer les performances** : Mesurer la qualit√© des pr√©dictions
5. **Faire des pr√©dictions** : Utiliser le mod√®le sur de nouveaux cas

### üè• Applications r√©elles :
- **Optimisation des traitements** : Identifier les patients √† risque
- **Personnalisation** : Adapter les protocoles selon le profil patient
- **Pr√©vention** : Intervenir avant l'arr√™t du traitement
- **Allocation des ressources** : Prioriser le suivi m√©dical

### üöÄ Pour aller plus loin :
- Ajouter plus de variables (historique, comorbidit√©s, socio-√©conomiques)
- Tester d'autres algorithmes (XGBoost, Neural Networks)
- Valider sur de vraies donn√©es m√©dicales
- Int√©grer dans un syst√®me d'aide √† la d√©cision clinique
""")

# Footer
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #666;'>
    üíä Tutoriel Machine Learning - Pr√©diction d'Adh√©rence M√©dicamenteuse<br>
    üî¨ Pour l'√©ducation et la recherche m√©dicale
</div>
""", unsafe_allow_html=True)
