import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import requests
import json
import sys
from io import StringIO
import traceback

# Configuration de la page
st.set_page_config(
    page_title="Mon Notebook Streamlit",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Style CSS personnalis√© pour ressembler √† un notebook Jupyter
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 30px;
        border-bottom: 3px solid #1f77b4;
        padding-bottom: 10px;
    }
    
    .cell-header {
        background-color: #f0f2f6;
        padding: 10px;
        border-left: 4px solid #1f77b4;
        margin: 20px 0 10px 0;
        font-weight: bold;
    }
    
    .code-cell {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 5px;
        border: 1px solid #e1e5e9;
        margin: 10px 0;
    }
    
    .code-editor {
        background-color: #1e1e1e;
        color: #d4d4d4;
        padding: 15px;
        border-radius: 5px;
        border: 1px solid #333;
        margin: 10px 0;
        font-family: 'Courier New', monospace;
    }
    
    .output-cell {
        background-color: #ffffff;
        padding: 15px;
        border-radius: 5px;
        border: 1px solid #d1d5db;
        margin: 10px 0;
    }
    
    .success-output {
        background-color: #f0f9ff;
        border-left: 4px solid #22c55e;
        padding: 10px;
        margin: 10px 0;
        border-radius: 5px;
    }
    
    .error-output {
        background-color: #fef2f2;
        border-left: 4px solid #ef4444;
        padding: 10px;
        margin: 10px 0;
        border-radius: 5px;
        color: #dc2626;
    }
</style>
""", unsafe_allow_html=True)

# Titre principal
st.markdown('<h1 class="main-header">üìä Mon Notebook Streamlit</h1>', unsafe_allow_html=True)

# Sidebar pour la navigation
st.sidebar.title("üóÇÔ∏è Navigation")
sections = [
    "üìã Introduction",
    "üíª Code interactif",
    "üìä Analyse des donn√©es",
    "üî¨ Exp√©rimentations",
    "üìà Visualisations",
    "üîç Exploration interactive",
    "üßÆ Calculs et mod√©lisation",
    "üìù Conclusions"
]

selected_section = st.sidebar.selectbox("Choisir une section:", sections)

# Fonction pour ex√©cuter du code Python de mani√®re s√©curis√©e
def execute_python_code(code, global_vars=None):
    """Ex√©cute du code Python et retourne le r√©sultat"""
    if global_vars is None:
        global_vars = {
            'pd': pd, 'np': np, 'plt': plt, 'sns': sns, 
            'px': px, 'go': go, 'st': st, 'datetime': datetime,
            'requests': requests, 'json': json
        }
    
    # Capturer la sortie
    old_stdout = sys.stdout
    sys.stdout = captured_output = StringIO()
    
    try:
        # Ex√©cuter le code
        exec(code, global_vars)
        output = captured_output.getvalue()
        return True, output, global_vars
    except Exception as e:
        error_msg = f"Erreur: {str(e)}\n{traceback.format_exc()}"
        return False, error_msg, global_vars
    finally:
        sys.stdout = old_stdout

# Initialiser les variables globales pour le code
if 'code_globals' not in st.session_state:
    st.session_state.code_globals = {
        'pd': pd, 'np': np, 'plt': plt, 'sns': sns, 
        'px': px, 'go': go, 'st': st, 'datetime': datetime,
        'requests': requests, 'json': json
    }

# Section 1: Introduction
if selected_section == "üìã Introduction":
    st.markdown('<div class="cell-header">Cellule 1: Introduction et imports</div>', unsafe_allow_html=True)
    
    st.markdown("**Objectif du notebook:**")
    st.write("Ce notebook Streamlit d√©montre l'analyse de donn√©es interactive avec diff√©rentes visualisations et calculs.")
    
    with st.expander("üì¶ Voir les imports"):
        st.code("""
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import requests
import json
        """, language="python")
    
    st.markdown('<div class="cell-header">Cellule 2: Configuration initiale</div>', unsafe_allow_html=True)
    
    # Param√®tres configurables
    st.subheader("‚öôÔ∏è Configuration")
    col1, col2 = st.columns(2)
    
    with col1:
        sample_size = st.slider("Taille de l'√©chantillon", 100, 10000, 1000)
        random_seed = st.number_input("Seed al√©atoire", value=42)
    
    with col2:
        chart_theme = st.selectbox("Th√®me des graphiques", ["plotly", "seaborn", "matplotlib"])
        show_code = st.checkbox("Afficher le code", value=True)

# Section 2: Code interactif
elif selected_section == "üíª Code interactif":
    st.markdown('<div class="cell-header">Cellule Code 1: Premiers pas avec Python</div>', unsafe_allow_html=True)
    
    st.write("**Exercice 1: Calculatrice Python**")
    st.write("√âcrivez du code Python pour effectuer des calculs simples:")
    
    code_1 = st.text_area(
        "Code Python:",
        value="""# Calculatrice simple
a = 10
b = 5

print(f"Addition: {a} + {b} = {a + b}")
print(f"Multiplication: {a} * {b} = {a * b}")
print(f"Division: {a} / {b} = {a / b}")

# Calculer la moyenne d'une liste
nombres = [12, 45, 23, 67, 34, 89, 56]
moyenne = sum(nombres) / len(nombres)
print(f"Moyenne: {moyenne:.2f}")""",
        height=200,
        key="code_1"
    )
    
    col1, col2 = st.columns([1, 4])
    with col1:
        if st.button("‚ñ∂Ô∏è Ex√©cuter", key="run_1"):
            success, output, globals_updated = execute_python_code(code_1, st.session_state.code_globals)
            st.session_state.code_globals = globals_updated
            
            if success:
                st.markdown('<div class="success-output">', unsafe_allow_html=True)
                st.code(output, language="")
                st.markdown('</div>', unsafe_allow_html=True)
            else:
                st.markdown('<div class="error-output">', unsafe_allow_html=True)
                st.code(output, language="")
                st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown('<div class="cell-header">Cellule Code 2: Manipulation de donn√©es</div>', unsafe_allow_html=True)
    
    st.write("**Exercice 2: Cr√©er et manipuler un DataFrame**")
    
    code_2 = st.text_area(
        "Code Python:",
        value="""# Cr√©er un DataFrame
import pandas as pd
import numpy as np

# Donn√©es d'exemple
data = {
    'nom': ['Alice', 'Bob', 'Charlie', 'Diana', 'Eve'],
    'age': [25, 30, 35, 28, 32],
    'ville': ['Paris', 'Lyon', 'Marseille', 'Toulouse', 'Nice'],
    'salaire': [50000, 60000, 55000, 52000, 58000]
}

df = pd.DataFrame(data)
print("DataFrame cr√©√©:")
print(df)
print(f"\\nNombre de lignes: {len(df)}")
print(f"√Çge moyen: {df['age'].mean():.1f} ans")
print(f"Salaire m√©dian: {df['salaire'].median():,} ‚Ç¨")""",
        height=250,
        key="code_2"
    )
    
    col1, col2 = st.columns([1, 4])
    with col1:
        if st.button("‚ñ∂Ô∏è Ex√©cuter", key="run_2"):
            success, output, globals_updated = execute_python_code(code_2, st.session_state.code_globals)
            st.session_state.code_globals = globals_updated
            
            if success:
                st.markdown('<div class="success-output">', unsafe_allow_html=True)
                st.code(output, language="")
                st.markdown('</div>', unsafe_allow_html=True)
            else:
                st.markdown('<div class="error-output">', unsafe_allow_html=True)
                st.code(output, language="")
                st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown('<div class="cell-header">Cellule Code 3: Zone de code libre</div>', unsafe_allow_html=True)
    
    st.write("**Exercice libre: √âcrivez votre propre code**")
    st.write("Utilisez les variables cr√©√©es pr√©c√©demment ou cr√©ez vos propres analyses:")
    
    code_free = st.text_area(
        "Votre code Python:",
        value="""# Zone de code libre - Exp√©rimentez !
# Vous pouvez utiliser les variables des cellules pr√©c√©dentes

# Exemple: Filtrer les donn√©es
if 'df' in globals():
    print("Personnes de plus de 30 ans:")
    jeunes = df[df['age'] > 30]
    print(jeunes[['nom', 'age', 'ville']])
    
    print("\\nStatistiques par ville:")
    print(df.groupby('ville')['salaire'].mean())
else:
    print("Ex√©cutez d'abord la cellule 2 pour cr√©er le DataFrame")

# Cr√©er une liste de nombres pairs
pairs = [i for i in range(1, 21) if i % 2 == 0]
print(f"\\nNombres pairs de 1 √† 20: {pairs}")""",
        height=300,
        key="code_free"
    )
    
    col1, col2 = st.columns([1, 4])
    with col1:
        if st.button("‚ñ∂Ô∏è Ex√©cuter", key="run_free"):
            success, output, globals_updated = execute_python_code(code_free, st.session_state.code_globals)
            st.session_state.code_globals = globals_updated
            
            if success:
                st.markdown('<div class="success-output">', unsafe_allow_html=True)
                st.code(output, language="")
                st.markdown('</div>', unsafe_allow_html=True)
            else:
                st.markdown('<div class="error-output">', unsafe_allow_html=True)
                st.code(output, language="")
                st.markdown('</div>', unsafe_allow_html=True)
    
    # Bouton pour r√©initialiser les variables
    if st.button("üîÑ R√©initialiser les variables", key="reset_vars"):
        st.session_state.code_globals = {
            'pd': pd, 'np': np, 'plt': plt, 'sns': sns, 
            'px': px, 'go': go, 'st': st, 'datetime': datetime,
            'requests': requests, 'json': json
        }
        st.success("Variables r√©initialis√©es!")

# Section 3: Analyse des donn√©es
elif selected_section == "üìä Analyse des donn√©es":
    st.markdown('<div class="cell-header">Cellule 3: G√©n√©ration et chargement des donn√©es</div>', unsafe_allow_html=True)
    
    # G√©n√©ration de donn√©es d'exemple
    np.random.seed(42)
    
    # Cr√©er un dataset d'exemple
    dates = pd.date_range(start='2023-01-01', end='2024-12-31', freq='D')
    data = {
        'date': dates,
        'ventes': np.random.normal(1000, 200, len(dates)) + np.sin(np.arange(len(dates)) * 2 * np.pi / 365) * 100,
        'temperature': np.random.normal(15, 10, len(dates)) + np.sin(np.arange(len(dates)) * 2 * np.pi / 365) * 10,
        'region': np.random.choice(['Nord', 'Sud', 'Est', 'Ouest'], len(dates)),
        'produit': np.random.choice(['A', 'B', 'C'], len(dates))
    }
    
    df = pd.DataFrame(data)
    df['ventes'] = df['ventes'].clip(lower=0)  # Pas de ventes n√©gatives
    
    st.write("**Aper√ßu des donn√©es g√©n√©r√©es:**")
    st.dataframe(df.head(10))
    
    # Statistiques descriptives
    st.markdown('<div class="cell-header">Cellule 4: Statistiques descriptives</div>', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**Statistiques des ventes:**")
        st.dataframe(df['ventes'].describe())
    
    with col2:
        st.write("**Informations sur le dataset:**")
        st.write(f"- Nombre de lignes: {len(df):,}")
        st.write(f"- Nombre de colonnes: {len(df.columns)}")
        st.write(f"- P√©riode: {df['date'].min()} √† {df['date'].max()}")
        st.write(f"- Valeurs manquantes: {df.isnull().sum().sum()}")

# Section 4: Exp√©rimentations
elif selected_section == "üî¨ Exp√©rimentations":
    st.markdown('<div class="cell-header">Cellule Exp√©rimentation 1: G√©n√©ration de donn√©es</div>', unsafe_allow_html=True)
    
    st.write("**Cr√©ez vos propres donn√©es et analysez-les**")
    
    code_exp_1 = st.text_area(
        "Code Python:",
        value="""# G√©n√©rer des donn√©es al√©atoires
import numpy as np
import pandas as pd

# Param√®tres
n_samples = 1000
np.random.seed(42)

# G√©n√©rer des donn√©es de ventes fictives
dates = pd.date_range(start='2023-01-01', periods=n_samples, freq='D')
ventes = np.random.normal(loc=1000, scale=200, size=n_samples)
ventes = np.maximum(ventes, 0)  # Pas de ventes n√©gatives

# Ajouter une tendance saisonni√®re
trend = np.sin(np.arange(n_samples) * 2 * np.pi / 365) * 150
ventes = ventes + trend

# Cr√©er le DataFrame
df_exp = pd.DataFrame({
    'date': dates,
    'ventes': ventes,
    'mois': dates.month,
    'jour_semaine': dates.dayofweek
})

print("Donn√©es g√©n√©r√©es:")
print(df_exp.head())
print(f"\\nP√©riode: {df_exp['date'].min()} √† {df_exp['date'].max()}")
print(f"Ventes moyennes: {df_exp['ventes'].mean():.2f}")
print(f"√âcart-type: {df_exp['ventes'].std():.2f}")""",
        height=300,
        key="code_exp_1"
    )
    
    col1, col2 = st.columns([1, 4])
    with col1:
        if st.button("‚ñ∂Ô∏è Ex√©cuter", key="run_exp_1"):
            success, output, globals_updated = execute_python_code(code_exp_1, st.session_state.code_globals)
            st.session_state.code_globals = globals_updated
            
            if success:
                st.markdown('<div class="success-output">', unsafe_allow_html=True)
                st.code(output, language="")
                st.markdown('</div>', unsafe_allow_html=True)
            else:
                st.markdown('<div class="error-output">', unsafe_allow_html=True)
                st.code(output, language="")
                st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown('<div class="cell-header">Cellule Exp√©rimentation 2: Analyse statistique</div>', unsafe_allow_html=True)
    
    st.write("**Analysez les donn√©es cr√©√©es**")
    
    code_exp_2 = st.text_area(
        "Code Python:",
        value="""# Analyser les donn√©es (utilisez df_exp de la cellule pr√©c√©dente)
if 'df_exp' in globals():
    print("=== ANALYSE STATISTIQUE ===")
    
    # Statistiques descriptives
    print("\\n1. Statistiques descriptives:")
    print(df_exp['ventes'].describe())
    
    # Analyse par mois
    print("\\n2. Ventes moyennes par mois:")
    ventes_mois = df_exp.groupby('mois')['ventes'].mean().sort_values(ascending=False)
    for mois, vente in ventes_mois.head().items():
        noms_mois = ['Jan', 'F√©v', 'Mar', 'Avr', 'Mai', 'Jun', 
                     'Jul', 'Ao√ª', 'Sep', 'Oct', 'Nov', 'D√©c']
        print(f"  {noms_mois[mois-1]}: {vente:.2f} ‚Ç¨")
    
    # Analyse par jour de la semaine
    print("\\n3. Ventes moyennes par jour de la semaine:")
    jours = ['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim']
    ventes_jour = df_exp.groupby('jour_semaine')['ventes'].mean()
    for jour_num, vente in ventes_jour.items():
        print(f"  {jours[jour_num]}: {vente:.2f} ‚Ç¨")
    
    # Trouver les meilleurs et pires jours
    print("\\n4. Records:")
    max_vente = df_exp.loc[df_exp['ventes'].idxmax()]
    min_vente = df_exp.loc[df_exp['ventes'].idxmin()]
    print(f"  Meilleur jour: {max_vente['date'].strftime('%Y-%m-%d')} ({max_vente['ventes']:.2f} ‚Ç¨)")
    print(f"  Pire jour: {min_vente['date'].strftime('%Y-%m-%d')} ({min_vente['ventes']:.2f} ‚Ç¨)")
    
else:
    print("Erreur: Ex√©cutez d'abord la cellule pr√©c√©dente pour cr√©er df_exp")""",
        height=300,
        key="code_exp_2"
    )
    
    col1, col2 = st.columns([1, 4])
    with col1:
        if st.button("‚ñ∂Ô∏è Ex√©cuter", key="run_exp_2"):
            success, output, globals_updated = execute_python_code(code_exp_2, st.session_state.code_globals)
            st.session_state.code_globals = globals_updated
            
            if success:
                st.markdown('<div class="success-output">', unsafe_allow_html=True)
                st.code(output, language="")
                st.markdown('</div>', unsafe_allow_html=True)
            else:
                st.markdown('<div class="error-output">', unsafe_allow_html=True)
                st.code(output, language="")
                st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown('<div class="cell-header">Cellule Exp√©rimentation 3: Playground libre</div>', unsafe_allow_html=True)
    
    st.write("**Zone d'exp√©rimentation libre**")
    st.write("Testez vos id√©es, cr√©ez des fonctions, explorez les donn√©es...")
    
    code_playground = st.text_area(
        "Votre code d'exp√©rimentation:",
        value="""# PLAYGROUND - Exp√©rimentez librement !

# Exemple 1: Cr√©er une fonction personnalis√©e
def analyser_tendance(data, colonne):
    \"\"\"Analyse la tendance d'une s√©rie temporelle\"\"\"
    if len(data) < 2:
        return "Pas assez de donn√©es"
    
    debut = data[colonne].head(30).mean()
    fin = data[colonne].tail(30).mean()
    
    if fin > debut * 1.05:
        return f"Tendance croissante (+{((fin/debut-1)*100):.1f}%)"
    elif fin < debut * 0.95:
        return f"Tendance d√©croissante ({((fin/debut-1)*100):.1f}%)"
    else:
        return "Tendance stable"

# Utiliser la fonction
if 'df_exp' in globals():
    tendance = analyser_tendance(df_exp, 'ventes')
    print(f"Tendance des ventes: {tendance}")

# Exemple 2: Calculer des moyennes mobiles
if 'df_exp' in globals():
    df_exp['moyenne_7j'] = df_exp['ventes'].rolling(window=7).mean()
    df_exp['moyenne_30j'] = df_exp['ventes'].rolling(window=30).mean()
    
    print("\\nMoyennes mobiles calcul√©es:")
    print(df_exp[['date', 'ventes', 'moyenne_7j', 'moyenne_30j']].tail())

# Exemple 3: Simuler des pr√©dictions
import random
if 'df_exp' in globals():
    derniere_vente = df_exp['ventes'].iloc[-1]
    predictions = []
    
    for i in range(7):  # Pr√©dire 7 jours
        # Pr√©diction simple avec un peu de randomness
        pred = derniere_vente * (0.95 + random.random() * 0.1)
        predictions.append(pred)
        derniere_vente = pred
    
    print(f"\\nPr√©dictions pour les 7 prochains jours:")
    for i, pred in enumerate(predictions, 1):
        print(f"  Jour +{i}: {pred:.2f} ‚Ç¨")""",
        height=400,
        key="code_playground"
    )
    
    col1, col2 = st.columns([1, 4])
    with col1:
        if st.button("‚ñ∂Ô∏è Ex√©cuter", key="run_playground"):
            success, output, globals_updated = execute_python_code(code_playground, st.session_state.code_globals)
            st.session_state.code_globals = globals_updated
            
            if success:
                st.markdown('<div class="success-output">', unsafe_allow_html=True)
                st.code(output, language="")
                st.markdown('</div>', unsafe_allow_html=True)
            else:
                st.markdown('<div class="error-output">', unsafe_allow_html=True)
                st.code(output, language="")
                st.markdown('</div>', unsafe_allow_html=True)

# Section 5: Visualisations
elif selected_section == "üìà Visualisations":
    st.markdown('<div class="cell-header">Cellule 5: Visualisations temporelles</div>', unsafe_allow_html=True)
    
    # R√©g√©n√©ration des donn√©es (simplifi√©e pour coh√©rence)
    np.random.seed(42)
    dates = pd.date_range(start='2023-01-01', end='2024-12-31', freq='D')
    df = pd.DataFrame({
        'date': dates,
        'ventes': np.random.normal(1000, 200, len(dates)) + np.sin(np.arange(len(dates)) * 2 * np.pi / 365) * 100,
        'temperature': np.random.normal(15, 10, len(dates)) + np.sin(np.arange(len(dates)) * 2 * np.pi / 365) * 10,
        'region': np.random.choice(['Nord', 'Sud', 'Est', 'Ouest'], len(dates)),
        'produit': np.random.choice(['A', 'B', 'C'], len(dates))
    })
    df['ventes'] = df['ventes'].clip(lower=0)
    
    # Graphique temporel interactif
    fig = px.line(df.sample(500), x='date', y='ventes', 
                  title="√âvolution des ventes dans le temps",
                  labels={'ventes': 'Ventes (‚Ç¨)', 'date': 'Date'})
    st.plotly_chart(fig, use_container_width=True)
    
    st.markdown('<div class="cell-header">Cellule 6: Analyse par r√©gion</div>', unsafe_allow_html=True)
    
    # Analyse par r√©gion
    ventes_region = df.groupby('region')['ventes'].agg(['mean', 'sum', 'count']).round(2)
    
    col1, col2 = st.columns(2)
    
    with col1:
        fig_bar = px.bar(ventes_region.reset_index(), x='region', y='mean',
                        title="Ventes moyennes par r√©gion",
                        labels={'mean': 'Ventes moyennes (‚Ç¨)', 'region': 'R√©gion'})
        st.plotly_chart(fig_bar, use_container_width=True)
    
    with col2:
        fig_pie = px.pie(ventes_region.reset_index(), values='sum', names='region',
                        title="R√©partition du chiffre d'affaires")
        st.plotly_chart(fig_pie, use_container_width=True)

# Section 6: Exploration interactive
elif selected_section == "üîç Exploration interactive":
    st.markdown('<div class="cell-header">Cellule 7: Filtres interactifs</div>', unsafe_allow_html=True)
    
    # R√©g√©n√©ration des donn√©es
    np.random.seed(42)
    dates = pd.date_range(start='2023-01-01', end='2024-12-31', freq='D')
    df = pd.DataFrame({
        'date': dates,
        'ventes': np.random.normal(1000, 200, len(dates)) + np.sin(np.arange(len(dates)) * 2 * np.pi / 365) * 100,
        'temperature': np.random.normal(15, 10, len(dates)) + np.sin(np.arange(len(dates)) * 2 * np.pi / 365) * 10,
        'region': np.random.choice(['Nord', 'Sud', 'Est', 'Ouest'], len(dates)),
        'produit': np.random.choice(['A', 'B', 'C'], len(dates))
    })
    df['ventes'] = df['ventes'].clip(lower=0)
    
    # Filtres
    col1, col2, col3 = st.columns(3)
    
    with col1:
        regions_selectionnees = st.multiselect("R√©gions", df['region'].unique(), default=df['region'].unique())
    
    with col2:
        produits_selectionnes = st.multiselect("Produits", df['produit'].unique(), default=df['produit'].unique())
    
    with col3:
        date_range = st.date_input("P√©riode", 
                                  value=(df['date'].min(), df['date'].max()),
                                  min_value=df['date'].min(),
                                  max_value=df['date'].max())
    
    # Filtrer les donn√©es
    df_filtered = df[
        (df['region'].isin(regions_selectionnees)) &
        (df['produit'].isin(produits_selectionnes)) &
        (df['date'] >= pd.Timestamp(date_range[0])) &
        (df['date'] <= pd.Timestamp(date_range[1]))
    ]
    
    st.markdown('<div class="cell-header">Cellule 8: R√©sultats filtr√©s</div>', unsafe_allow_html=True)
    
    # M√©triques
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Nombre de records", f"{len(df_filtered):,}")
    
    with col2:
        st.metric("Ventes totales", f"{df_filtered['ventes'].sum():,.0f} ‚Ç¨")
    
    with col3:
        st.metric("Ventes moyennes", f"{df_filtered['ventes'].mean():,.0f} ‚Ç¨")
    
    with col4:
        st.metric("Temp√©rature moyenne", f"{df_filtered['temperature'].mean():.1f}¬∞C")
    
    # Graphique de corr√©lation
    if len(df_filtered) > 0:
        fig_scatter = px.scatter(df_filtered, x='temperature', y='ventes', 
                               color='region', size='ventes',
                               title="Corr√©lation Temp√©rature vs Ventes",
                               labels={'temperature': 'Temp√©rature (¬∞C)', 'ventes': 'Ventes (‚Ç¨)'})
        st.plotly_chart(fig_scatter, use_container_width=True)

# Section 7: Calculs et mod√©lisation
elif selected_section == "üßÆ Calculs et mod√©lisation":
    st.markdown('<div class="cell-header">Cellule 9: Calculs statistiques</div>', unsafe_allow_html=True)
    
    # R√©g√©n√©ration des donn√©es
    np.random.seed(42)
    dates = pd.date_range(start='2023-01-01', end='2024-12-31', freq='D')
    df = pd.DataFrame({
        'date': dates,
        'ventes': np.random.normal(1000, 200, len(dates)) + np.sin(np.arange(len(dates)) * 2 * np.pi / 365) * 100,
        'temperature': np.random.normal(15, 10, len(dates)) + np.sin(np.arange(len(dates)) * 2 * np.pi / 365) * 10,
        'region': np.random.choice(['Nord', 'Sud', 'Est', 'Ouest'], len(dates)),
        'produit': np.random.choice(['A', 'B', 'C'], len(dates))
    })
    df['ventes'] = df['ventes'].clip(lower=0)
    
    # Calculs statistiques
    correlation = df['ventes'].corr(df['temperature'])
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**Corr√©lation Ventes-Temp√©rature:**")
        st.write(f"Coefficient de corr√©lation: {correlation:.3f}")
        
        if abs(correlation) > 0.5:
            st.success("Corr√©lation forte")
        elif abs(correlation) > 0.3:
            st.warning("Corr√©lation mod√©r√©e")
        else:
            st.info("Corr√©lation faible")
    
    with col2:
        st.write("**Analyse de tendance:**")
        df_monthly = df.groupby(df['date'].dt.to_period('M'))['ventes'].mean()
        trend = "Croissante" if df_monthly.iloc[-1] > df_monthly.iloc[0] else "D√©croissante"
        st.write(f"Tendance g√©n√©rale: {trend}")
        st.write(f"Variation: {((df_monthly.iloc[-1] / df_monthly.iloc[0]) - 1) * 100:.1f}%")
    
    st.markdown('<div class="cell-header">Cellule 10: Pr√©dictions simples</div>', unsafe_allow_html=True)
    
    # Pr√©diction simple bas√©e sur la moyenne mobile
    window = st.slider("Fen√™tre de moyenne mobile", 7, 90, 30)
    
    df_sorted = df.sort_values('date')
    df_sorted['moving_avg'] = df_sorted['ventes'].rolling(window=window).mean()
    
    # Pr√©diction pour les prochains jours
    last_avg = df_sorted['moving_avg'].iloc[-1]
    
    st.write(f"**Pr√©diction bas√©e sur moyenne mobile ({window} jours):**")
    st.write(f"Ventes pr√©vues pour demain: {last_avg:.0f} ‚Ç¨")
    
    # Graphique avec moyenne mobile
    fig_pred = go.Figure()
    fig_pred.add_trace(go.Scatter(x=df_sorted['date'], y=df_sorted['ventes'], 
                                 mode='lines', name='Ventes r√©elles', opacity=0.7))
    fig_pred.add_trace(go.Scatter(x=df_sorted['date'], y=df_sorted['moving_avg'], 
                                 mode='lines', name=f'Moyenne mobile ({window}j)', 
                                 line=dict(width=3)))
    
    fig_pred.update_layout(title="Ventes avec moyenne mobile",
                          xaxis_title="Date",
                          yaxis_title="Ventes (‚Ç¨)")
    
    st.plotly_chart(fig_pred, use_container_width=True)

# Section 8: Conclusions
elif selected_section == "üìù Conclusions":
    st.markdown('<div class="cell-header">Cellule 11: R√©sum√© de l\'analyse</div>', unsafe_allow_html=True)
    
    st.write("**Principales conclusions de l'analyse:**")
    
    conclusions = [
        "üìä Les donn√©es montrent une variabilit√© naturelle des ventes avec une composante saisonni√®re",
        "üå°Ô∏è La corr√©lation entre temp√©rature et ventes n√©cessite une analyse plus approfondie",
        "üó∫Ô∏è Les performances varient significativement selon les r√©gions",
        "üìà La tendance g√©n√©rale peut √™tre mod√©lis√©e avec des moyennes mobiles",
        "üîç L'analyse interactive permet une exploration flexible des donn√©es"
    ]
    
    for conclusion in conclusions:
        st.write(f"- {conclusion}")
    
    st.markdown('<div class="cell-header">Cellule 13: Code final interactif</div>', unsafe_allow_html=True)
    
    st.write("**Derni√®re exp√©rimentation - R√©sum√© interactif**")
    
    code_final = st.text_area(
        "Code de synth√®se:",
        value="""# Synth√®se finale - Cr√©ez votre propre rapport
print("=== RAPPORT FINAL D'ANALYSE ===")
print("=" * 50)

# V√©rifier les variables disponibles
variables = list(globals().keys())
data_vars = [var for var in variables if 'df' in var]

print(f"Variables de donn√©es disponibles: {data_vars}")

# Si nous avons des donn√©es, cr√©er un rapport
if any('df' in var for var in globals()):
    print("\\nüìä R√âSUM√â EX√âCUTIF:")
    print("- Analyse de donn√©es r√©alis√©e avec succ√®s")
    print("- Visualisations cr√©√©es")
    print("- Tendances identifi√©es")
    print("- Mod√®les statistiques appliqu√©s")
    
    # Exemple de calcul personnalis√©
    import datetime
    now = datetime.datetime.now()
    print(f"\\nüìÖ Rapport g√©n√©r√© le: {now.strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Calcul cr√©atif
    magic_number = sum(ord(c) for c in "STREAMLIT") % 100
    print(f"\\nüé≤ Nombre magique du jour: {magic_number}")
    
    print("\\n‚úÖ Analyse termin√©e avec succ√®s!")
    print("\\nMerci d'avoir utilis√© ce notebook interactif!")
else:
    print("Aucune donn√©e trouv√©e. Ex√©cutez d'abord les cellules pr√©c√©dentes.")""",
        height=300,
        key="code_final"
    )
    
    col1, col2 = st.columns([1, 4])
    with col1:
        if st.button("‚ñ∂Ô∏è Ex√©cuter", key="run_final"):
            success, output, globals_updated = execute_python_code(code_final, st.session_state.code_globals)
            st.session_state.code_globals = globals_updated
            
            if success:
                st.markdown('<div class="success-output">', unsafe_allow_html=True)
                st.code(output, language="")
                st.markdown('</div>', unsafe_allow_html=True)
            else:
                st.markdown('<div class="error-output">', unsafe_allow_html=True)
                st.code(output, language="")
                st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown('<div class="cell-header">Cellule 14: Prochaines √©tapes</div>', unsafe_allow_html=True)
    
    st.write("**Recommandations pour approfondir l'analyse:**")
    
    recommendations = [
        "Collecter plus de donn√©es historiques pour am√©liorer les mod√®les",
        "Impl√©menter des mod√®les de machine learning plus sophistiqu√©s",
        "Analyser les facteurs externes (√©v√©nements, promotions, etc.)",
        "D√©velopper un dashboard en temps r√©el",
        "Automatiser les rapports et alertes"
    ]
    
    for i, rec in enumerate(recommendations, 1):
        st.write(f"{i}. {rec}")
    
    # Bouton pour t√©l√©charger les donn√©es
    if st.button("üì• T√©l√©charger les donn√©es analys√©es"):
        # R√©g√©n√©ration pour coh√©rence
        np.random.seed(42)
        dates = pd.date_range(start='2023-01-01', end='2024-12-31', freq='D')
        df = pd.DataFrame({
            'date': dates,
            'ventes': np.random.normal(1000, 200, len(dates)) + np.sin(np.arange(len(dates)) * 2 * np.pi / 365) * 100,
            'temperature': np.random.normal(15, 10, len(dates)) + np.sin(np.arange(len(dates)) * 2 * np.pi / 365) * 10,
            'region': np.random.choice(['Nord', 'Sud', 'Est', 'Ouest'], len(dates)),
            'produit': np.random.choice(['A', 'B', 'C'], len(dates))
        })
        df['ventes'] = df['ventes'].clip(lower=0)
        
        csv = df.to_csv(index=False)
        st.download_button(
            label="üíæ T√©l√©charger CSV",
            data=csv,
            file_name="analyse_ventes.csv",
            mime="text/csv"
        )

# Footer
st.markdown("---")
st.markdown("*Notebook cr√©√© avec Streamlit - Mise √† jour automatique des calculs*")
